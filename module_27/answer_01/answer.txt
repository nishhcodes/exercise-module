What is the DOM?

The Document Object Model (DOM) is a programming interface for web documents. It represents the structure of an HTML 
or XML document as a tree-like structure, where each node is an element, attribute, or piece of text.

Think of the DOM as a bridge between HTML and JavaScript, allowing developers to dynamically interact with and manipulate 
web pages.

Structure of the DOM:

When a browser loads an HTML document, it parses it and creates a DOM tree, which looks like this:

    <!DOCTYPE html>
    <html>
      <head>
        <title>Page Title</title>
      </head>
      <body>
        <h1>Hello, World!</h1>
        <p>This is a paragraph.</p>
      </body>
    </html>

The above HTML is converted into a DOM tree:

Document
├── html
│   ├── head
│   │   └── title
│   └── body
│       ├── h1
│       └── p

Each element (e.g., <html>, <body>, <h1>) is a node in the tree.



Role of the DOM in Web Development

1. Dynamic Content Manipulation: JavaScript can access and modify the DOM to change the content of a webpage dynamically.

    document.querySelector("h1").textContent = "Welcome!";

2. Event Handling: The DOM allows developers to respond to user interactions, like clicks and keyboard inputs.

    document.querySelector("button").addEventListener("click", () => {
    alert("Button clicked!");
    });

3. Modifying Styles: JavaScript can change CSS styles dynamically.

    document.querySelector("p").style.color = "blue";

4. Creating and Removing Elements: Elements can be added or removed from the DOM on the fly.

    let newDiv = document.createElement("div");
    newDiv.textContent = "New Element";
    document.body.appendChild(newDiv);

5. AJAX & Fetch API for Updating Content: The DOM is used to update a webpage without refreshing by fetching data asynchronously.

    fetch("https://api.example.com/data")
    .then(response => response.json())
    .then(data => {
      document.querySelector("#output").textContent = data.message;
    });

